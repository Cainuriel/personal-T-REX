/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  TestModule,
  TestModuleInterface,
} from "../../../../../contracts/compliance/modular/modules/TestModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_compliance",
        type: "address",
      },
    ],
    name: "ComplianceBound",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "_compliance",
        type: "address",
      },
    ],
    name: "ComplianceUnbound",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_compliance",
        type: "address",
      },
    ],
    name: "bindCompliance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_blocked",
        type: "bool",
      },
    ],
    name: "blockModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_compliance",
        type: "address",
      },
    ],
    name: "canComplianceBind",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "doSomething",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_compliance",
        type: "address",
      },
    ],
    name: "isComplianceBound",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isPlugAndPlay",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "moduleBurnAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_compliance",
        type: "address",
      },
    ],
    name: "moduleCheck",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "moduleMintAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_from",
        type: "address",
      },
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_value",
        type: "uint256",
      },
    ],
    name: "moduleTransferAction",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_compliance",
        type: "address",
      },
    ],
    name: "unbindCompliance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b506080516114fb61004c60003960008181610590015281816105d0015281816107f60152818161083601526108c901526114fb6000f3fe6080604052600436106101145760003560e01c80634f1ef286116100a0578063a6b206bf11610064578063a6b206bf14610317578063bcc2105314610337578063e6f5e80714610358578063f104a8c914610209578063f2fde38b1461036c57600080fd5b80634f1ef2861461028f57806352d1902d146102a2578063715018a6146102c55780638129fc1c146102da5780638da5cb5b146102ef57600080fd5b80632cb7e1ec116100e75780632cb7e1ec146101c95780633659cfe6146101e9578063372491a2146102095780634a932544146102295780634cf4d2951461024957600080fd5b8063013b7ce4146101195780630694a5fb1461014e57806306fdde031461017057806316a10ba2146101a9575b600080fd5b34801561012557600080fd5b50610139610134366004611096565b61038c565b60405190151581526020015b60405180910390f35b34801561015a57600080fd5b5061016e6101693660046110e3565b6103c1565b005b34801561017c57600080fd5b50604080518082018252600a815269546573744d6f64756c6560b01b602082015290516101459190611122565b3480156101b557600080fd5b5061016e6101c4366004611155565b6104e1565b3480156101d557600080fd5b5061016e6101e4366004611177565b610541565b3480156101f557600080fd5b5061016e6102043660046110e3565b610586565b34801561021557600080fd5b5061016e6102243660046111b3565b610665565b34801561023557600080fd5b5061016e6102443660046110e3565b6106a9565b34801561025557600080fd5b506101396102643660046110e3565b6001600160a01b031660009081526000805160206114a6833981519152602052604090205460ff1690565b61016e61029d3660046111f3565b6107ec565b3480156102ae57600080fd5b506102b76108bc565b604051908152602001610145565b3480156102d157600080fd5b5061016e61096f565b3480156102e657600080fd5b5061016e610983565b3480156102fb57600080fd5b506033546040516001600160a01b039091168152602001610145565b34801561032357600080fd5b5061016e6103323660046112b5565b610a93565b34801561034357600080fd5b506101396103523660046110e3565b50600190565b34801561036457600080fd5b506001610139565b34801561037857600080fd5b5061016e6103873660046110e3565b610ae5565b6001600160a01b038116600090815260ca602052604081205460ff16156103b5575060006103b9565b5060015b949350505050565b3360009081526000805160206114a6833981519152602081905260409091205460ff166104095760405162461bcd60e51b8152600401610400906112ce565b60405180910390fd5b6000805160206114a68339815191526001600160a01b03831661046e5760405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d207a65726f2061646472657373006044820152606401610400565b336001600160a01b038416146104965760405162461bcd60e51b815260040161040090611305565b6001600160a01b038316600081815260208390526040808220805460ff19169055517f408b49d9be1c914c52a0227e18a077e5a892dddf32a26cfa94a5d9708fad77189190a2505050565b3360009081526000805160206114a6833981519152602081905260409091205460ff166105205760405162461bcd60e51b8152600401610400906112ce565b5033600090815260ca60205260409020805460ff1916911515919091179055565b3360009081526000805160206114a6833981519152602081905260409091205460ff166105805760405162461bcd60e51b8152600401610400906112ce565b50505050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036105ce5760405162461bcd60e51b815260040161040090611346565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661061760008051602061145f833981519152546001600160a01b031690565b6001600160a01b03161461063d5760405162461bcd60e51b815260040161040090611392565b61064681610b5b565b6040805160008082526020820190925261066291839190610b63565b50565b3360009081526000805160206114a6833981519152602081905260409091205460ff166106a45760405162461bcd60e51b8152600401610400906112ce565b505050565b6000805160206114a68339815191526001600160a01b03821661070e5760405162461bcd60e51b815260206004820152601f60248201527f696e76616c696420617267756d656e74202d207a65726f2061646472657373006044820152606401610400565b6001600160a01b03821660009081526020829052604090205460ff16156107775760405162461bcd60e51b815260206004820152601860248201527f636f6d706c69616e636520616c726561647920626f756e6400000000000000006044820152606401610400565b336001600160a01b0383161461079f5760405162461bcd60e51b815260040161040090611305565b6001600160a01b038216600081815260208390526040808220805460ff19166001179055517f1f7b76c58fb697eb53c6c7c1becb96911516a136e24d7ced386b2355358b75a39190a25050565b6001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001630036108345760405162461bcd60e51b815260040161040090611346565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661087d60008051602061145f833981519152546001600160a01b031690565b6001600160a01b0316146108a35760405162461bcd60e51b815260040161040090611392565b6108ac82610b5b565b6108b882826001610b63565b5050565b6000306001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461095c5760405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608401610400565b5060008051602061145f83398151915290565b610977610cce565b6109816000610d28565b565b600054610100900460ff16158080156109a35750600054600160ff909116105b806109bd5750303b1580156109bd575060005460ff166001145b610a205760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610400565b6000805460ff191660011790558015610a43576000805461ff0019166101001790555b610a4b610d7a565b8015610662576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b3360009081526000805160206114a6833981519152602081905260409091205460ff16610ad25760405162461bcd60e51b8152600401610400906112ce565b5033600090815260c96020526040902055565b610aed610cce565b6001600160a01b038116610b525760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610400565b61066281610d28565b610662610cce565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610b96576106a483610db1565b826001600160a01b03166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610bf0575060408051601f3d908101601f19168201909252610bed918101906113de565b60015b610c535760405162461bcd60e51b815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608401610400565b60008051602061145f8339815191528114610cc25760405162461bcd60e51b815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608401610400565b506106a4838383610e4d565b6033546001600160a01b031633146109815760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610400565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff16610da15760405162461bcd60e51b8152600401610400906113f7565b610da9610e72565b610981610ea1565b6001600160a01b0381163b610e1e5760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608401610400565b60008051602061145f83398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b610e5683610ec8565b600082511180610e635750805b156106a4576105808383610f08565b600054610100900460ff16610e995760405162461bcd60e51b8152600401610400906113f7565b610981610f34565b600054610100900460ff166109815760405162461bcd60e51b8152600401610400906113f7565b610ed181610db1565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b6060610f2d838360405180606001604052806027815260200161147f60279139610f64565b9392505050565b600054610100900460ff16610f5b5760405162461bcd60e51b8152600401610400906113f7565b61098133610d28565b6060600080856001600160a01b031685604051610f819190611442565b600060405180830381855af49150503d8060008114610fbc576040519150601f19603f3d011682016040523d82523d6000602084013e610fc1565b606091505b5091509150610fd286838387610fdc565b9695505050505050565b6060831561104b578251600003611044576001600160a01b0385163b6110445760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610400565b50816103b9565b6103b983838151156110605781518083602001fd5b8060405162461bcd60e51b81526004016104009190611122565b80356001600160a01b038116811461109157600080fd5b919050565b600080600080608085870312156110ac57600080fd5b6110b58561107a565b93506110c36020860161107a565b9250604085013591506110d86060860161107a565b905092959194509250565b6000602082840312156110f557600080fd5b610f2d8261107a565b60005b83811015611119578181015183820152602001611101565b50506000910152565b60208152600082518060208401526111418160408501602087016110fe565b601f01601f19169190910160400192915050565b60006020828403121561116757600080fd5b81358015158114610f2d57600080fd5b60008060006060848603121561118c57600080fd5b6111958461107a565b92506111a36020850161107a565b9150604084013590509250925092565b600080604083850312156111c657600080fd5b6111cf8361107a565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561120657600080fd5b61120f8361107a565b9150602083013567ffffffffffffffff8082111561122c57600080fd5b818501915085601f83011261124057600080fd5b813581811115611252576112526111dd565b604051601f8201601f19908116603f0116810190838211818310171561127a5761127a6111dd565b8160405282815288602084870101111561129357600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000602082840312156112c757600080fd5b5035919050565b6020808252601e908201527f6f6e6c7920626f756e6420636f6d706c69616e63652063616e2063616c6c0000604082015260600190565b60208082526021908201527f6f6e6c7920636f6d706c69616e636520636f6e74726163742063616e2063616c6040820152601b60fa1b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b6000602082840312156113f057600080fd5b5051919050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600082516114548184602087016110fe565b919091019291505056fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564f6cc97de1266c180cd39f3b311632644143ce7873d2927755382ad4b39e8ae00a26469706673582212208152a17980a499615eea6075dd142e1e95ef7cb21be5943f4a4e06086190e47d64736f6c63430008110033";

type TestModuleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestModuleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestModule__factory extends ContractFactory {
  constructor(...args: TestModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestModule> {
    return super.deploy(overrides || {}) as Promise<TestModule>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestModule {
    return super.attach(address) as TestModule;
  }
  override connect(signer: Signer): TestModule__factory {
    return super.connect(signer) as TestModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestModuleInterface {
    return new utils.Interface(_abi) as TestModuleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestModule {
    return new Contract(address, _abi, signerOrProvider) as TestModule;
  }
}
